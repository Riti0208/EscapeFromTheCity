/****************************************************************************
* タイトル:  デバッグ用文字列表示処理
* ファイル名:debugProc.cpp
* 作成者：	 芳崎大地
* 作成日：   2015/11/30
*******************************************************************************/
/*******************************************************************************
* 更新履歴：
*
*******************************************************************************/
/*******************************************************************************
* インクルードファイル
*******************************************************************************/
#include"debugProc.h"
#include <stdarg.h>
/*******************************************************************************
* マクロ定義
*******************************************************************************/
/*******************************************************************************
* 構造体の定義
*******************************************************************************/
/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/
/*******************************************************************************
* グローバル変数
*******************************************************************************/
LPD3DXFONT	CDebugProc::m_pFont;				//フォントのワーク
char		CDebugProc::m_aStrDebug[MAX_CHAR];	//描画用文字列
/*******************************************************************************
* 関数名:HRESULT InitDebugProc()
*
* 引数:  なし
* 戻り値:なし
* 説明 デバッグ文字列描画の初期化処理
*
*******************************************************************************/
void CDebugProc::Init(){
	LPDIRECT3DDEVICE9 pDevice = CRenderer::GetDevice();
	m_pFont = NULL;
	D3DXCreateFont(pDevice,		//D3Dデバイスのポインタ
		36,						//文字の高さ
		0,						//文字の幅
		3,						//フォントの太さ
		3,						//ミップマップのレベルの数
		FALSE,					//イタリックフォントの場合はtrue,それ以外はfalse
		SHIFTJIS_CHARSET,		//フォントの文字セット
		OUT_DEFAULT_PRECIS,		//Windows での、実際のフォントと目的のフォントのサイズおよび特性の一致方法を指定します(よくわからない)
		DEFAULT_QUALITY,		//Windows での、実際のフォントと目的のフォントとの一致方法を指定します(よくわからない)
		DEFAULT_PITCH,			//ピッチとファミリインデックス
		"Terminal",				//フォントの名前を保持する文字列
		&m_pFont);
	memset(m_aStrDebug, 0, sizeof m_aStrDebug);
};
/*******************************************************************************
* 関数名:void UninitDebugProc()
*
* 引数:  なし
* 戻り値:なし
* 説明 デバッグ文字列描画のの終了処理
*
*******************************************************************************/
void CDebugProc::Uninit(){
	if (m_pFont != NULL){
		m_pFont->Release();
		m_pFont = NULL;
	}
}
/*******************************************************************************
* 関数名:void UpdateDebugProc()
*
* 引数:  なし
* 戻り値:なし
* 説明 デバッグ文字列描画の更新処理
*
*******************************************************************************/
void CDebugProc::Update(){
}
/*******************************************************************************
* 関数名:void DrawDebugProc()
*
* 引数:  なし
* 戻り値:なし
* 説明 デバッグ文字列描画の描画処理
*
*******************************************************************************/
void CDebugProc::Draw(){
	RECT rect = { 0, 0, (LONG)SCREEN_WIDTH, (LONG)SCREEN_HEIGHT };
	m_pFont->DrawText(NULL,						// 描画スプライト描画先
		&m_aStrDebug[0],					// 描画するテキスト	
		-1,							// テキストの長さ、−１ならば自動で数値が合わされる
		&rect,						// テキストを描画する長方形領域
		DT_LEFT,					// テキスト描画オプション
		D3DCOLOR_RGBA(255, 0, 0, 255)	// 文字カラー
		);
	std::string str = m_aStrDebug;
	memset(m_aStrDebug, 0, sizeof m_aStrDebug);
}
/*******************************************************************************
* 関数名:void PrintDebugProc()
*
* 引数:  なし
* 戻り値:なし
* 説明　俺printf的な
*
*******************************************************************************/
void CDebugProc::print(const char* fmt, ...){
	int CharCnt = strlen(m_aStrDebug);
	va_list ap;
	va_start(ap, fmt);
	vsprintf(&m_aStrDebug[CharCnt], fmt, ap);
	va_end(ap);
}