/****************************************************************************
* タイトル:  GUIの処理
* ファイル名:gui.cpp
* 作成者：	 芳崎大地
* 作成日：   2016/05/20
*******************************************************************************/
/*******************************************************************************
* 更新履歴：
*
*******************************************************************************/
/*******************************************************************************
* インクルードファイル
*******************************************************************************/
#include"manager.h"
/*******************************************************************************
* マクロ定義
*******************************************************************************/
/*******************************************************************************
* グローバル変数
*******************************************************************************/
std::list<CGui*> CGui::guiVec;
bool CGui::m_bOnGui;
/*******************************************************************************
* 関数名:CGui::CGui(D3DXVECTOR3 pos, float fWidth, float fHeight, char *pFileName)
*
* 引数: D3DXVECTOR3 pos, float fWidth, float fHeight, char *pFileName
* 戻り値:	なし
* 説明	guiクラスのコンストラクタ
*
*******************************************************************************/
CGui::CGui(){
	guiVec.push_back(this);
	curItr = guiVec.end();
}
/*******************************************************************************
* 関数名:CGui::Release
*
* 引数: なし
* 戻り値:	なし
* 説明	guiクラスの単体開放
*
******************************************************************************/
void CGui::Release(){
	guiVec.erase(curItr);
	delete this;
}
/*******************************************************************************
* 関数名:void CGui::Uninit()
*
* 引数:  void、なし
* 戻り値:void、なし
* 説明	guiクラスの終了処理
*
*******************************************************************************/
void CGui::ReleaseAll(){
	std::for_each(guiVec.begin(), guiVec.end(), [&](CGui *gui){
		delete gui;
		gui = NULL;
	});
	guiVec.resize(0);
	guiVec.empty();
}
/*******************************************************************************
* 関数名:void CGui::Update()
*WW
* 引数:  void、なし
* 戻り値:void、なし
* 説明	guiクラスの更新処理
*
*******************************************************************************/
void CGui::UpdateAll(){
	std::for_each(guiVec.begin(), guiVec.end(), [&](CGui *gui){
		gui->Update();
	});
}
/*******************************************************************************
* 関数名:void CGui::Draw()
*
* 引数:  void、なし
* 戻り値:void、なし
* 説明	guiクラスの描画処理
*
*******************************************************************************/
void CGui::DrawAll(){
	std::for_each(guiVec.begin(), guiVec.end(), [&](CGui *gui){
		gui->Draw();
	});
}